'use strict';

var _ = require('underscore'),
    Class = require('class.extend');

module.exports = Class.extend({

   init: function(serverless, opts) {
      this._serverless = serverless;
      this._provider = serverless ? serverless.getProvider('aws') : null;
      this._opts = opts;
      this._service = serverless.service;
      this._custom = serverless.service ? serverless.service.custom : null;

      if (!this._provider) {
         throw new Error('This plugin must be used with AWS');
      }

      this.hooks = {
         'deploy:finalize': this._addTagsToStages.bind(this),
      };
   },

   _addTagsToStages: function() {
      var self = this,
          stackTags = this._getStackTags();

      return this._getAPIGatewayStages()
         .then(function(stages) {
            return _.map(stages, function(stage) {
               return self._tagAPIGatewayStage(stage.arn, stackTags);
            });
         });
   },

   _tagAPIGatewayStage: function(arn, tags) {
      var params;

      params = {
         resourceArn: arn,
         tags: tags,
      };

      return this._provider.request('APIGateway', 'tagResource', params);
   },

   _getStackTags: function() {
      return _.extend({
         STAGE: this._service.provider.stage, // The provider's stackTags does not include the stage
      }, this._service.provider.stackTags);
   },

   _getAPIGatewayStages: function() {
      var stackName = this._provider.naming.getStackName(),
          region = this._service.provider.region,
          stage = this._service.provider.stage;

      // In order to build the ARN for an API Gateway stage, we need the
      // physical ID of the stage's API. The physical ID must be retrieved from
      // CloudFormation as this ID is generated by CloudFormation on creation
      // of the API.
      return this._provider.request('CloudFormation', 'describeStackResources', { StackName: stackName })
         .then(function(resp) {
            return _.chain(resp.StackResources)
               .where({ ResourceType: 'AWS::ApiGateway::RestApi' })
               .map(function(resource) {
                  return {
                     arn: 'arn:aws:apigateway:' + region + '::/restapis/' + resource.PhysicalResourceId + '/stages/' + stage,
                  };
               })
               .value();
         });
   },

});
